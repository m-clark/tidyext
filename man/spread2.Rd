% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spread2.R
\name{spread2}
\alias{spread2}
\title{Spread without frustration}
\usage{
spread2(
  data,
  key,
  value,
  compact = TRUE,
  fill = NA,
  convert = FALSE,
  drop = TRUE,
  sep = NULL
)
}
\arguments{
\item{data}{See \code{\link[tidyr]{spread}}.}

\item{key}{See \code{\link[tidyr]{spread}}.}

\item{value}{See \code{\link[tidyr]{spread}}.}

\item{compact}{When you don't have a unique identifier there is more than one
way the output could be produced. Actually two. One is rather messy but may
in fact be what is desired. The other is more 'compact'. See the examples.}

\item{fill}{See \code{\link[tidyr]{spread}}.}

\item{convert}{See \code{\link[tidyr]{spread}}.}

\item{drop}{See \code{\link[tidyr]{spread}}.}

\item{sep}{See \code{\link[tidyr]{spread}}.}
}
\value{
A data frame with 'wide' format.
}
\description{
Spread without frustration
}
\details{
Anyone that uses spread more than once has likely come across the
  duplicate identifiers problem.  This function works just like select (it's
  mostly just a wrapper) except that it works when you don't have unique
  identifiers, which is actually quite often.  The only additional
  functionality regards the \code{compact} argument. See the examples for
  what this means.

  For more, see
  \href{https://stackoverflow.com/questions/45898614/how-to-spread-columns-with-duplicate-identifiers?rq=1}{StackOverflow}
   for example, or the numerous repeated issue brought up at the
  \href{https://github.com/tidyverse/tidyr/issues}{tidyr GitHub issues
  page}. Search for 'spread duplicate' for all, not just open issues (direct link couldn't be handled
  by R documentation).
}
\examples{
library(tidyext); library(tidyr)

# initial example from spread
stocks_init <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)

# a very common situation
stocks <- data.frame(
  X = rnorm(10, 0, 1),
  Y = rnorm(10, 0, 2),
  Z = rnorm(10, 0, 4)
)


stocksm_init <- stocks_init \%>\% gather(stock, price, -time)
stocksm_init \%>\% spread(stock, price)    # works fine
stocksm <- stocks \%>\% gather(stock, price)
# stocksm \%>\% spread(stock, price)       # annoying
stocksm \%>\% spread2(stock, price)        # works fine
stocksm \%>\% spread2(stock, price, compact = FALSE)

# works with NA
stocksm$price[sample(1:nrow(stocksm), 5)] = NA
stocksm \%>\% spread2(stock, price)
stocksm \%>\% spread2(stock, price, compact = FALSE)

}
\seealso{
\code{\link[tidyr]{spread}}
}
